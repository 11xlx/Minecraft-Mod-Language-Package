[image{200, 20, 0.44,pneumaticcraft:textures/wiki/drone_interface.png}]
无人机接口是一个只有在安装了 ComputerCraft 时才会出现的方块。它是一个用来与无人机联系的外部设备。在对无人机编程时加入 ComputerCraft 的编程拼图从而做到这一点。你可以将其与其他的编程拼图结合在一起。当无人机运行到了 ComputerCraft 拼图时，它会试图与一个选定区域内可用的无人机接口连接。说“可用”是因为一个无人机接口只能一次与一个无人机连接。下列函数可用：

[prefix{l}]isConnectedToDrone() [prefix{}] 
如果一个无人机与该无人机接口连接（即无人机的程序运行到了 ComputerCraft 拼图并且连接上了），返回 True。

[prefix{l}]getDronePressure() [prefix{}] 
返回所连接的无人机的当前气压。

[prefix{l}]getDronePosition() [prefix{}] 
返回包含有无人机的 x, y, z 坐标的列表。

[prefix{l}]exitPiece() [prefix{}] 
终止无人机所在的 ComputerCraft 拼图，使得无人机的程序进入下一块拼图。

[prefix{l}]getAllActions() [prefix{}] 
返回包含所有可以被选择的操作（比如 dig（挖掘） 或者 place（放置））的列表，以英文表示。

[prefix{l}]setBlockOrder(<"closest"/"highToLow"/"lowToHigh">) [prefix{}]
设置无人机挖掘/放置方块的顺序。

[prefix{l}]getAreaTypes() [prefix{}] 
返回所有可行的区域类型（filled（填充），frame（框架），sphere（球）等）。

[prefix{l}]addArea(<x>,<y>,<z>),
addArea(<x1>,<y1>,<z1>,<x2>,<y2>,<z2>,<areaType>) [prefix{}] 
向无人机目前存储的区域添加一个区域。当使用后一个重载时，<x1,y1,z1>表示的是第一个点（代表手动添加时第一个 GPS 工具），<x1,y2,z2>表示第二个点。

[prefix{l}]removeArea(<x>,<y>,<z>),
removeArea(<x1>,<y1>,<z1>,<x2>,<y2>,<z2>,<区域类型>) [prefix{}] 
从目前存储的区域里删除一个区域（即加入黑名单）。

[prefix{l}]clearArea() [prefix{}] 
清空当前存储的区域。

[prefix{l}]showArea() [prefix{}] 
使用区域渲染器显示存储的区域，如果你习惯的话。
[prefix{l}]hideArea() [prefix{}] 
停止显示无人机存储的区域。

[prefix{l}]addWhitelistItemFilter(<物品/方块名>, <损害值/元数据>, <使用元数据>, <使用NBT>, <使用矿物词典>, <useModSimilarity>) [prefix{}] 
就像把一个物品过滤器放在一块拼图的右侧一样（加入白名单）。物品/方块名使用 Minecraft 格式，如："minecraft:stone"，或"pneumaticcraft:pressureTube"。‘使用xxx’参数确定哪些过滤器会被使用的 bool 参数（和物品过滤器编程拼图里的多选框功能一样）。

[prefix{l}]addBlacklistItemFilter(<物品/方块名>, <损害值/元数据>, <使用元数据>, <使用NBT>, <使用矿物词典>, <useModSimilarity>) [prefix{}] 
和addWhitelistItemFilter(...)一样，但加入的是黑名单。

[prefix{l}]clearWhitelistItemFilter() [prefix{}] 
清空白名单内存储的物品过滤器。

[prefix{l}]clearBlacklistItemFilter() [prefix{}] 
清空黑名单内存储的物品过滤器。

[prefix{l}]addWhitelistText(<文本>) [prefix{}] 
向白名单加入一个文本。例如：指定攻击实体操作的过滤器。

[prefix{l}]addBlacklistText(<文本>) [prefix{}] 
向黑名单加入一个文本。例如：指定攻击实体操作的过滤器。

[prefix{l}]clearWhitelistText() [prefix{}] 
清空白名单内的文本。

[prefix{l}]clearBlacklistText() [prefix{}] 
清空黑名单内的文本。

[prefix{l}]addWhitelistLiquidFilter(<流体名>) [prefix{}] 
就像把一个流体过滤器放在一块拼图的右侧一样（加入白名单）。流体名可以是其‘注册名’，也可以是本地化的名称。

[prefix{l}]addBlacklistLiquidFilter(<流体名>) [prefix{}] 
和addWhitelistLiquidFilter(...)一样，但加入的是黑名单。

[prefix{l}]clearWhitelistLiquidFilter() [prefix{}] 
清空白名单内存储的物品过滤器。

[prefix{l}]clearBlacklistLiquidFilter() [prefix{}] 
清空黑名单内存储的物品过滤器。

[prefix{l}]setEmittingRedstone(<强度>) [prefix{}] 
设置执行 emitRedstone （输出红石信号）操作时输出的红石信号强度。.

[prefix{l}]setRenameString(<名称>) [prefix{}] 
设置执行 rename （改名）操作时无人机会被设置的名称。

[prefix{l}]setDropStraight(<true/false>) [prefix{}] 
设置执行 dropItem （丢出物品）操作时物品会以一个随机的速度丢出（false）还是竖直下落（true）。 

[prefix{l}]setUseCount(<true/false>) [prefix{}] 
设置无人机是否有最大输入/输出/丢出物品限制。 如果设置为 true，需要同时调用 setCount()。

[prefix{l}]setCount(<数量>) [prefix{}] 
设置最大输入/输出/丢出物品限制，也是条件检查时被检查的物品数量。

[prefix{l}]setIsAndFunction(<true/false>) [prefix{}] 
只在条件中使用。设置为 true 时，所有被检查的方块需要满足条件（如>= 10）。

[prefix{l}]setOperator(<">=" / "=">) [prefix{}] 
只在条件中使用。设置该条件检查相等于（"="）或是大于等于（">="）指定数量。这个数量可以用 setCount() 设置。

[prefix{l}]evaluateCondition() [prefix{}] 
返回 true/false。只在条件中使用。其将根据条件是否满足返回 true/false。无人机条件可以在调用 setAction() 后被检查。注意：如果你要检查的是非无人机条件，需要等到 isActionDone。

[prefix{l}]setSide(<朝向>, <可访问性>) [prefix{}] 
设置方块某一面可以被访问。用于  Inventory Import / Export（输入/出容器）时设置无人机可以访问容器的哪一面。也可以用于 Place（放置）指令，此时决定如何放置方块。

[prefix{l}]setSides(<下>, <上>, <北>, <南>, <东>, <西>) [prefix{}] 
和上一个重载一样，这次一次性设置所有面（6 个 bool）

[prefix{l}]setUseMaxActions(<true/false>) [prefix{}] 
This says whether or not the Drone has a maximum actions performed on a block at a time before the command is considered 'done'. Applies to the Place, Dig and Right-Click block program. If true, also use setMaxActions().

[prefix{l}]setMaxActions(<amount>) [prefix{}] 
This configures the maximum amount of actions performed on blocks before the command is considered 'done'. This applies to the Place, Dig an Right-Click block program. Be sure to also call setUseMaxActions(true) to enable usage of this.

[prefix{l}]setCraftingGrid(<item/block name>, <item/block name>, ...(9x)) [prefix{}] 
Sets up the crafting grid so when the Crafting instruction is called, this recipe will be used. You need to specify all 9 items making up the recipe. For empty spaces supply nil. The naming format is the same as for supplying item filters.

[prefix{l}]setSneaking(<true/false>) [prefix{}]
Only used in the right click command, this will set whether or not the fake player is sneaking while right clicking.

[prefix{l}]setPlaceFluidBlocks(<true/false>) [prefix{}]
Only used in the Liquid Export command, when set to true the Drone will be allowed to place down fluid blocks.

[prefix{l}]setVariable(<变量名>, <true/false>) [prefix{}]
[prefix{l}]setVariable(<变量名>, <x>) [prefix{}]
[prefix{l}]setVariable(<变量名>, <x>, <y>, <z>) [prefix{}]
Sets the[link{pneumaticcraft:progwidget/coordinate_operator}] variable[link{}] of this Drone. When passing 'true', the coordinate will be set to (1,0,0). Alternatively, false will be setting it to (0,0,0). It is possible to set global variables (#) as well.

[prefix{l}]getVariable(<variable name>) [prefix{}]
Returns the value of the variable from this Drone (x, y and z). It is possible to get global (#) and special variables ($) as well.

[prefix{l}]setSignText(<line1>, <line2>, ..., <lineN>) [prefix{}]
Sets the text that's going to be set to Signs using the Edit Sign command.

[prefix{l}]setRequiresTool(<true/false>) [prefix{}]
This configures whether or not the Drone should use a tool when executing the Dig or Harvest piece.

[prefix{l}]setAction(<action>) [prefix{}] 
String that represents the action. This should be one of the actions returned by getAllActions().

[prefix{l}]getAction() [prefix{}]
Returns a string that represents the last action set by 'setAction'. Will return nil when no action is set. Can be used to make sure to only call 'isActionDone()' when this method does not return nil.

[prefix{l}]abortAction() [prefix{}] 
Stops the current running action.

[prefix{l}]isActionDone() [prefix{}] 
Returns true if the current action is done (goto has arrived at the target location, inventory import can't import anymore, dig has dug every possible block, ..).

[prefix{l}]forgetTarget() [prefix{}] 
When the Drone was targeting an Entity (in the Entity Attack program), this will stop attacking that target.

[prefix{l}]getUpgrades(<upgrade>) [prefix{}] 
Will get the amount of inserted upgrades of the given type. This type is the index of the upgrade (in creative, or NEI), starting with 0. Or the metadata value when you use NEI. A Speed upgrade for example has an index of 5.

Anytime the Drone gets updated a ring will be shot out of the Drone Interface, indicating it was successful. The color of the ring is the same color as the puzzle piece it was associated with.